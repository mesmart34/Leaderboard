// <auto-generated />
using System;
using Leaderboard.Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Leaderboard.Infrastructure.Db.Migrations
{
    [DbContext(typeof(LeaderboardDbContext))]
    partial class LeaderboardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Leaderboard.Domain.Entities.TableActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserCreatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_created_id");

                    b.Property<Guid>("UserUpdatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_updated_id");

                    b.HasKey("Id")
                        .HasName("pk_activities");

                    b.HasIndex("UserCreatedId")
                        .HasDatabaseName("ix_activities_user_created_id");

                    b.HasIndex("UserUpdatedId")
                        .HasDatabaseName("ix_activities_user_updated_id");

                    b.ToTable("activities", (string)null);
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.TableScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("period_end");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("period_start");

                    b.Property<Guid>("UserCreatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_created_id");

                    b.Property<Guid>("UserUpdatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_updated_id");

                    b.HasKey("Id")
                        .HasName("pk_scores");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_scores_activity_id");

                    b.HasIndex("UserCreatedId")
                        .HasDatabaseName("ix_scores_user_created_id");

                    b.HasIndex("UserUpdatedId")
                        .HasDatabaseName("ix_scores_user_updated_id");

                    b.ToTable("scores", (string)null);
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.TableUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.TableActivity", b =>
                {
                    b.HasOne("Leaderboard.Domain.Entities.TableUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activities_users_user_created_id");

                    b.HasOne("Leaderboard.Domain.Entities.TableUser", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activities_users_user_updated_id");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.TableScore", b =>
                {
                    b.HasOne("Leaderboard.Domain.Entities.TableActivity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_scores_activities_activity_id");

                    b.HasOne("Leaderboard.Domain.Entities.TableUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_scores_users_user_created_id");

                    b.HasOne("Leaderboard.Domain.Entities.TableUser", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_scores_users_user_updated_id");

                    b.Navigation("Activity");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });
#pragma warning restore 612, 618
        }
    }
}
